// Code generated by MockGen. DO NOT EDIT.
// Source: ContactManager\service\service.go
// Package mock_service is a generated GoMock package.

package mocks
import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteContactNumber mocks base method.
func (m *MockService) DeleteContactNumber(ctx context.Context, contactName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactNumber", ctx, contactName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContactNumber indicates an expected call of DeleteContactNumber.
func (mr *MockServiceMockRecorder) DeleteContactNumber(ctx, contactName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactNumber", reflect.TypeOf((*MockService)(nil).DeleteContactNumber), ctx, contactName)
}

// GetContactNumber mocks base method.
func (m *MockService) GetContactNumber(ctx context.Context, contactName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactNumber", ctx, contactName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactNumber indicates an expected call of GetContactNumber.
func (mr *MockServiceMockRecorder) GetContactNumber(ctx, contactName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactNumber", reflect.TypeOf((*MockService)(nil).GetContactNumber), ctx, contactName)
}

// SetContactNumber mocks base method.
func (m *MockService) SetContactNumber(ctx context.Context, contactName, phoneNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContactNumber", ctx, contactName, phoneNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContactNumber indicates an expected call of SetContactNumber.
func (mr *MockServiceMockRecorder) SetContactNumber(ctx, contactName, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContactNumber", reflect.TypeOf((*MockService)(nil).SetContactNumber), ctx, contactName, phoneNumber)
}

// UpdateContactNumber mocks base method.
func (m *MockService) UpdateContactNumber(ctx context.Context, contactName, updatedNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactNumber", ctx, contactName, updatedNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContactNumber indicates an expected call of UpdateContactNumber.
func (mr *MockServiceMockRecorder) UpdateContactNumber(ctx, contactName, updatedNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactNumber", reflect.TypeOf((*MockService)(nil).UpdateContactNumber), ctx, contactName, updatedNumber)
}
